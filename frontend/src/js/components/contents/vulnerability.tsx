import React, { useState } from "react";

import Paper from "@material-ui/core/Paper";
import Toolbar from "@material-ui/core/Toolbar";
import Tooltip from "@material-ui/core/Tooltip";
import AppBar from "@material-ui/core/AppBar";
import Grid from "@material-ui/core/Grid";
import IconButton from "@material-ui/core/IconButton";
import RefreshIcon from "@material-ui/icons/Refresh";
import TextField from "@material-ui/core/TextField";

import SearchIcon from "@material-ui/icons/Search";
import Typography from "@material-ui/core/Typography";
import Link from "@material-ui/core/Link";

import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemText from "@material-ui/core/ListItemText";

import { useParams } from "react-router-dom";
import useStyles from "./style";
import { Link as RouterLink } from "react-router-dom";
import { Redirect, useLocation } from "react-router-dom";
import Snackbar from "@material-ui/core/Snackbar";
import Button from "@material-ui/core/Button";
import Divider from "@material-ui/core/Divider";

import * as model from "./model";
import * as utils from "./utils";

type vulnStatus = {
  isLoaded: boolean;
  warning?: string;
  error?: string;
  vuln?: model.vulnerability;
};

type vulnInfoProps = {
  vulnID: string;
};

function VulnInfo(props: vulnInfoProps) {
  const classes = useStyles();
  const [status, setStatus] = useState<vulnStatus>({
    isLoaded: false,
  });

  const getVulnerability = () => {
    console.log("getVuln", props.vulnID);
    if (!props.vulnID) {
      return;
    }

    setStatus({ isLoaded: false });

    fetch(`api/v1/vuln/${props.vulnID}`)
      .then((res) => res.json())
      .then(
        (result) => {
          console.log({ result });
          if (result.data) {
            setStatus({
              isLoaded: true,
              vuln: result.data,
            });
          } else {
            setStatus({
              isLoaded: true,
              warning: `No data for "${props.vulnID}"`,
            });
          }
        },
        (error) => {
          console.log({ error });
          setStatus({
            isLoaded: true,
            error: error.message,
          });
        }
      );
  };

  const render = () => {
    if (!status.isLoaded) {
      return <Typography>Loading...</Typography>;
    } else if (status.error) {
      return <utils.errorMessage msg={status.error} />;
    } else if (status.warning) {
      return <utils.warnMessage msg={status.warning} />;
    } else {
      return (
        <Grid item xs={12}>
          <Grid item>
            <Grid component="h2">
              {status.vuln.VulnID}: {status.vuln.Detail.Title}
            </Grid>

            <Typography gutterBottom variant="body1">
              {status.vuln.Detail.Description}
            </Typography>
          </Grid>

          <Grid item>
            <Typography gutterBottom variant="h6">
              References
            </Typography>
            <List dense={true}>
              {status.vuln.Detail.References.map((ref, idx) => (
                <ListItem key={idx}>
                  <Link href={ref}>{ref}</Link>
                </ListItem>
              ))}
            </List>
          </Grid>
        </Grid>
      );
    }
  };

  React.useEffect(getVulnerability, [props.vulnID]);

  return <div className={classes.contentWrapper}>{render()}</div>;
}

export function Content() {
  const classes = useStyles();

  const [inputVulnID, setInputVulnID] = useState<string>("");
  const [searchVulnID, setSearchVulnID] = useState<string>("");
  const [redirect, setRedirect] = useState<string>();
  const location = useLocation();

  const { vulnID } = useParams();
  React.useEffect(() => {
    console.log({ vulnID });
    setInputVulnID(vulnID ? vulnID : "");
    setSearchVulnID(vulnID);
  }, [location]);

  const renderRedirect = () => {
    if (redirect) {
      return <Redirect to={`/vuln/${redirect}`} />;
    }
  };

  const onChangeVulnID = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputVulnID(e.target.value);
  };
  const onKeyUpVulnID = (e: any) => {
    if (e.which === 13) {
      setRedirect(inputVulnID);
    }
  };
  const onClickRefreshButton = () => {
    setRedirect(inputVulnID);
  };

  const renderVulnInfo = searchVulnID ? (
    <VulnInfo vulnID={searchVulnID} />
  ) : undefined;

  return (
    <Paper className={classes.paper}>
      {renderRedirect()}
      <AppBar position="static" color="default" elevation={0}>
        <Toolbar>
          <Grid container spacing={2} alignItems="center">
            <Grid item>
              <SearchIcon color="inherit" />
            </Grid>
            <Grid item xs>
              <TextField
                fullWidth
                placeholder="Vulnerability ID"
                value={inputVulnID}
                onChange={onChangeVulnID}
                onKeyUp={onKeyUpVulnID}
                InputProps={{
                  disableUnderline: true,
                }}
              />
            </Grid>
            <Grid item>
              <Tooltip title="Reload">
                <IconButton onClick={onClickRefreshButton}>
                  <RefreshIcon color="inherit" />
                </IconButton>
              </Tooltip>
            </Grid>
          </Grid>
        </Toolbar>
      </AppBar>

      {renderVulnInfo}
    </Paper>
  );
}
